@startuml Aplikacija produktivnosti in organizacije 
skinparam class {
  backgroundColor white
  borderColor #5FB8EC
  arrowColor black
}
skinparam class<<entity>> {
  backgroundColor #e8f5fc
  borderColor Blue
}
skinparam class<<control>> {
  backgroundColor #fce8e8
  borderColor Red
}
skinparam class<<boundary>> {
  backgroundColor #f2fce8
  borderColor Green
}

'skinparam shadowing false
skinparam defaultTextAlignment center
hide circle
'hide members

'---------Razredi---------------------------
' Ali bo uporabnik imel atribut tip ali bomo imeli posebej
' razred za prijavljene/neprijavljene/developer uporabnike? idk
Class NeprijavljeniUporabnik<<entity>> {
  -opravila Opravilo []
}
Class Uporabnik<<entity>> {
  -id: int
  -ime: string
  -hash: string
  -sol: string 
  +nastaviGeslo(geslo: string): void
  +jeGesloPravilno(geslo: string): boolean
}
Class PrijavljeniUporabnik<<entity>>{

}
Class Administrator<<entity>>{
  -mail: string
}
Class Analitik<<entity>>{

}
Class Developer<<entity>>{

}
Class StatistikaUporabnika<<control>>{
  +vrniOpravilaNaDan(uporabnik: Uporabnik): Opravilo []
}
Class PrikazStatistike<<boundary>>{

}
Class Opravilo<<entity>>{
  -id: int
  -ime: string
  -opis: string
  -datum: date
}
class UrejanjeOpravil<<control>>{
  +vrniOpravila(uporabnik: Uporabnik): Opravilo []
  +dodajOpravilo(uporabnik: Uporabnik, opravilo: Opravilo): string
  +urediOpravilo(id_opravila: int): void
}
class OknoZaOpravila<<boundary>>{
  +izpisiStatus(status: string): void
  +izpisiOpravilaUporabnika(Uporabnik uporabnik): void
}
Class Napaka<<entity>>{
  -ime: string
  -opis: string
  -datum: date
  -uporabnik: Uporabnik
  -solved: boolean
  +solveIssue(): void
}
Class PrijavaNapake<<control>>{
  +dodajNapako(uporabnik: Uporabnik, napaka: Napaka): void
  +getUnsolvedIssues(): Napaka []
  +getUnsolvedIssues(user: Developer): Napaka[]
}
Class PogledZaPrijavoNapake<<boundary>>

Class IskalnikUporabnikov<<control>>{
  +najdiUporabnike(ime: string): Uporabnik []
  +vrniVseUporabnike(): Uporabnik []
}

' obvestiUporabnika - ko čas poteče, naredi popup al whatever. (better name pls)
' also a rabmo dodatne atribute/funkcije za pavzo?
Class Časovnik<<control>>{
  -trenutniCas: int
  -isRunning: boolean
  +zacniCasovnik(): void
  +resetirajCasovnik(): void
  +obvestiUporabnika(): void
}
Class PrikazČasovnika<<boundary>>{
  
}


'------Povezave-----------------------
NeprijavljeniUporabnik -left-* Opravilo
UrejanjeOpravil --> Opravilo
OknoZaOpravila --> UrejanjeOpravil
PrijavaNapake --> Napaka
PogledZaPrijavoNapake --> PrijavaNapake
IskalnikUporabnikov --> Uporabnik
Časovnik --> PrikazČasovnika
PrijavljeniUporabnik -up-|> Uporabnik
PrijavljeniUporabnik --|> NeprijavljeniUporabnik
Analitik -up-|> Uporabnik
Administrator -up-|> Uporabnik
Developer -up-|> Uporabnik
StatistikaUporabnika --> PrijavljeniUporabnik
PrikazStatistike --> StatistikaUporabnika
@enduml

' extra notes
' - a se bolj fokusiramo da je čim boljši diagram al da
'    bo vse na diagramu dejansko implementirano?
' - kako pokažeš google calendar lol
' loči uporabnika na frontend in backend z adapterjem
' načrtovalske vzorce se na koncu označi na diagramu
' POVEŽI ZASLONSKE MASKE SKUPAJ!
' logina ni treba dat noter.