@startuml Aplikacija produktivnosti in organizacije 
skinparam class {
  backgroundColor white
  borderColor #5FB8EC
  arrowColor black
}
skinparam class<<entity>> {
  backgroundColor #e8f5fc
  borderColor Blue
}
skinparam class<<control>> {
  backgroundColor #fce8e8
  borderColor Red
}
skinparam class<<boundary>> {
  backgroundColor #f2fce8
  borderColor Green
}

'skinparam shadowing false
skinparam defaultTextAlignment center
skinparam packageStyle rectangle
skinparam groupInheritance 2
hide circle
'hide members

'---------Razredi---------------------------
package Factory{
  Class User<<entity>> {
    -id: int
    -name: string
    -hash: string
    -salt: string 
    +setPassword(password: string): void
    +isPasswordCorrect(password: string): boolean
  }
  Class UserFactory<<control>>{
    +createUser(userType: String): User
  }
  Class SignedUser<<entity>>{

  }
  Class Admin<<entity>>{
    -mail: string
  }
  Class Analyst<<entity>>{

  }
  Class Developer<<entity>>{

  }
  Class UnsignedUser<<entity>> {
    -task Task []
  }
  Class SignedUserCreator<<control>>{
    +createUser(userType: String): void
  }
  Class AdminCreator<<control>>{
    +createUser(userType: String): void
  }
  Class DeveloperCreator<<control>>{
    +createUser(userType: String): void
  }
  Class AnalystCreator<<control>>{
    +createUser(userType: String): void
  }
}

Class ShowStatistics<<boundary>>{
  +showUserInfo(user: User)
}
Class Task<<entity>>{
  -id: int
  -name: string
  -description: string
  -date: date
}
class EditTasks<<control>>{
  +getTasks(user: User): Task []
  +addTask(user: User, Task: task): string
  +editTask(taskId: int): void
}
class TaskWindow<<boundary>>{
  +showTasks(user: User): void
}
Class Issue<<entity>>{
  -title: string
  -description: string
  -date: date
  -user: User
  -solved: boolean
  +solve(): void
}
Class IssueReport<<control>>{
  +addIssue(user: User, issue: Issue): void
  +getUnsolvedIssues(): Issue []
  +getUnsolvedIssues(user: Developer): Issue []
}
Class IssueReportWindow<<boundary>>

Class SearchUsers<<control>>{
  +findUser(name: string): User []
  +getUsers(): User []
}

' obvestiUsera - ko čas poteče, naredi popup al whatever. (better name pls)
' also a rabmo dodatne atribute/funkcije za pavzo?
Class Timer<<control>>{
  -currentTime: int
  -isRunning: boolean
  +startTimer(): void
  +resetTimer(): void
  +alertUser(): void
}
Class TimerWindow<<boundary>>{
  
}


'------Povezave-----------------------
UnsignedUser --* Task
EditTasks --> Task
TaskWindow --> EditTasks
IssueReport --> Issue
IssueReportWindow --> IssueReport
SearchUsers --> User
Timer --> TimerWindow
SignedUser --|> User
SignedUser --|> UnsignedUser
Analyst --|> User
Admin --|> User
Developer --|> User
ShowStatistics --> EditTasks
UserFactory --> User
SignedUserCreator --|> UserFactory
DeveloperCreator --|> UserFactory
AnalystCreator --|> UserFactory
AdminCreator --|> UserFactory
@enduml

' extra notes
' - a se bolj fokusiramo da je čim boljši diagram al da
'    bo vse na diagramu dejansko implementirano?
' - kako pokažeš google calendar lol
' loči Usera na frontend in backend z adapterjem
' načrtovalske vzorce se na koncu označi na diagramu
' POVEŽI ZASLONSKE MASKE SKUPAJ!
' logina ni treba dat noter.