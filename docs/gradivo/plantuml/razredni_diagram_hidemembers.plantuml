@startuml Aplikacija produktivnosti in organizacije 
skinparam class {
  backgroundColor white
  borderColor #5FB8EC
  arrowColor black
}
skinparam class<<entity>> {
  backgroundColor #e8f5fc
  borderColor Blue
}
skinparam class<<control>> {
  backgroundColor #fce8e8
  borderColor Red
}
skinparam class<<boundary>> {
  backgroundColor #f2fce8
  borderColor Green
}
skinparam class<<External API>>{
  backgroundColor #f8f0d4
  borderColor Orange
}

'skinparam shadowing false
skinparam style strictuml
skinparam defaultTextAlignment center
skinparam packageStyle rectangle
skinparam groupInheritance 5
hide circle
hide members

'---------Razredi---------------------------
package Factory{
  Class User<<entity>> {
    -id: int
    -name: string
    -hash: string
    -salt: string
    +getName(): string
    +setName(): string
    +getId(): int
    +setPassword(password: string): void
    +isPasswordCorrect(password: string): boolean
  }
  Class UserFactory<<control>>{
    +createUser(userType: string): User
  }
  Class SignedUser<<entity>>{
    -following: SignedUser []
    +getFollowing(): SignedUser []
  }
  Class Admin<<entity>>{
    -mail: string
  }
  Class Analyst<<entity>>{
    
  }
  Class Developer<<entity>>{

  }
  Class UnsignedUser<<entity>> {
    -completedTasksCount: int
    +getTasks(): Task []
    +addTask(task: Task): void
    +editTask(taskId: int, name: string, description: string): void
    +removeTask(taskId): void
    +getCompletedTaskCount(): int
    +incrementCompletedTasksCount(): void
  }
  Class SignedUserCreator<<control>>{
    +createUser(userType: string): void
  }
  Class AdminCreator<<control>>{
    +createUser(userType: string): void
  }
  Class DeveloperCreator<<control>>{
    +createUser(userType: string): void
  }
  Class AnalystCreator<<control>>{
    +createUser(userType: string): void
  }
}
Class StatisticsWindow<<boundary>>{
  +showPrenesiPodatkeForm(): void
  +showUserInfo(user: User): void
}
Class Statistics<<control>>{
  +prenesiPodatkeVSkladisce(start: date, end: date): void
}
package Command{
  Class StatisticsWindowCommand<<control>>{
    -statisticsWindow: StatisticsWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class ManageEmployeesWindowCommand<<control>>{
    -manageEmployeesWindow: ManageEmployeesWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class TaskWindowCommand<<control>>{
    -taskWindow: TaskWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class GoogleCalendarWindowCommand<<control>>{
    -googleCalendarWindow: GoogleCalendarWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class ActivityWindowCommand<<control>>{
    -activityWindow: ActivityWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class IssueReportWindowCommand<<control>>{
    -issueReportWindow: IssueReportWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class IssueSolveWindowCommand<<control>>{
    -issueSolveWindow: IssueSolveWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class TimerWindowCommand<<control>>{
    -timerWindow: TimerWindow
    +execute(): void
    +unexecute(): void
    +isReversible(): boolean
  }
  Class SearchUsersWindowCommand<<control>>{
    -SearchUsersWindow: SearchUsersWindow
  }
}
Class ManageEmployeesWindow<<boundary>>
Class ManageEmployees<<control>>{
  +addEmployee(ime: string, priimek: string, email: string, password: string): void
}
Class Task<<entity>>{
  -id: int
  -name: string
  -description: string
  -date: date
  +setName(ime: string): string
  +setDescription(desc: string): string
  +getName(): string
  +getDescription(): string
}
package Observer{
  class EditTasks<<control>>{
    +getTasks(user: UnsignedUser): Task []
    +addTask(user: UnsignedUser, task: Task): string
    +editTask(user: UnsignedUser, taskId: int, name: string, description: string): void
    +removeTask(taskId: int): void
    +completeTask(taskId: int): void
    +getCompletedTaskCount(userid: id): int
    +notify(): void
  }
  class TaskWindow<<boundary>>{
    +showTasks(user: UnsignedUser): void
    +showEditTaskForm(id: int): void
    +isFormValid(): boolean
    +update(): void
  }
}
class WindowManager<<control>>{
  +openWindow(window: string): void
}
class Toolbar<<boundary>>
class ActivityWindow<<boundary>>{
  +showActivity(user: UnsignedUser)
}
class Activity<<control>>{
  +getUserInfo(id: int): void
}
Class Issue<<entity>>{
  -title: string
  -description: string
  -date: date
  -user: User
  -solved: boolean
  -solvedBy: Developer
  +solve(developer: Developer): void
  +getTitle(): string
  +getDescription(): string
}
Class IssueReport<<control>>{
  +addIssue(user: User, issue: Issue): void
  +getUnsolvedIssues(): Issue []
  +getSolvedIssues(developer: Developer): Issue []
  +solveIssue(issue: Issue, solvedBy: Developer): void
  +rejectIssue(issue: Issue)
}
Class IssueSolveWindow<<boundary>>{
  +showUnsolvedIssues(developer: Developer): void
}
Class IssueReportWindow<<boundary>>

Class SearchUsers<<control>>{
  +findUsers(name: string): SignedUser []
  +followUser(id: int): void
}
Class SearchUsersWindow<<boundary>>{
  +showUsers(name: string): void
}
package Adapter{
  Class GoogleCalendarAdapter<<control>>{
    +getTasks(): Task []
  }
  Class GoogleCalendarWindow<<boundary>>{
    +showCalendarTasks(): void
  }
  Class GoogleCalendarAPI<<External API>>{
    +list(calendarId: string): Event[]
  }
}
package State{
  package Singleton{
    Class Timer<<entity>>{
      -instance: Timer
      -currentTime: int
      -currentBreak: int
      -isRunning: boolean
      -duration: int
      -break: int
      +getInstance(): Timer
      +start(): void
      +reset(): void
      +startBreak(): void
      +stopBreak(): void
      +getCurrentTime(): void
    }
  }
  Class TimerState<<control>>{
    +start(): void
    +reset(): void
    +startBreak(): void
    +stopBreak(): void
  }
  Class IdleState<<control>>{
    +resume(): void
  }
  Class RunningState<<control>>{
    +reset(): void
    +startBreak(): void
  }
  Class BreakState<<control>>{
    +reset(): void
    +stopBreak(): void
  }
}
Class TimerManager<<control>>{
    +start(): void
    +reset(): void
    +startBreak(): void
    +stopBreak(): void
    +getCurrentTime(): void
}
Class TimerWindow<<boundary>>{
  +showCurrentTime(): void
}

'------Povezave-----------------------
Task "<font size=15> 0..* </font>" -up-* "<font size=15>  1..1</font>" UnsignedUser
EditTasks --> UnsignedUser
TaskWindow --> EditTasks
IssueReport --> Issue
IssueReportWindow --> IssueReport
IssueSolveWindow --> IssueReport
SearchUsers --> SignedUser
TimerWindow --> TimerManager
TimerManager --> Timer
SignedUser --|> User
SignedUser --|> UnsignedUser
Analyst --|> User
Admin --|> User
Developer --|> User
StatisticsWindow --> EditTasks
StatisticsWindow --> Statistics
Statistics --> UnsignedUser
UserFactory --> User
SignedUserCreator --|> UserFactory
DeveloperCreator --|> UserFactory
AnalystCreator --|> UserFactory
AdminCreator --|> UserFactory
WindowManager --> IssueReportWindowCommand
IssueReportWindowCommand --> IssueReportWindow
WindowManager --> TimerWindowCommand
TimerWindowCommand --> TimerWindow
WindowManager --> StatisticsWindowCommand
StatisticsWindowCommand --> StatisticsWindow
WindowManager --> TaskWindowCommand
TaskWindowCommand --> TaskWindow
WindowManager --> IssueSolveWindowCommand
IssueSolveWindowCommand --> IssueSolveWindow
WindowManager --> SearchUsersWindowCommand
SearchUsersWindowCommand --> SearchUsersWindow
WindowManager --> ActivityWindowCommand
ActivityWindowCommand --> ActivityWindow
WindowManager --> ManageEmployeesWindowCommand
ManageEmployeesWindowCommand --> ManageEmployeesWindow
WindowManager --> GoogleCalendarWindowCommand
GoogleCalendarWindowCommand --> GoogleCalendarWindow
GoogleCalendarWindow --> GoogleCalendarAdapter
GoogleCalendarAdapter --> GoogleCalendarAPI
ManageEmployeesWindow --> ManageEmployees
ActivityWindow --> Activity
Activity --> EditTasks
SearchUsersWindow --> SearchUsers
ManageEmployees --> DeveloperCreator
ManageEmployees --> AnalystCreator
Toolbar --> WindowManager
TimerState --o Timer
IdleState --|> TimerState
RunningState --|> TimerState
BreakState --|> TimerState
@enduml